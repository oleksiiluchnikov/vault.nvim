local assert = require("luassert")
local NotesMap = require("vault.notes.map")

describe("NotesMap", function()
	it("should return some notes map nodes", function()
		local notes_map = NotesMap()
		print("Notes founded: " .. notes_map:__len())
		assert.is_true(#notes_map > 1)
	end)
	it("should return list of note map objects", function()
		local notes_map_list = NotesMap():list()
		print("Notes founded: " .. #notes_map_list)
		assert.is_true(vim.tbl_islist(notes_map_list))
	end)
	it("should return notes with `tags` excluded: `class'", function()
		local notes_map = NotesMap()
		print("Notes founded: " .. #notes_map)
		local notes_map_without_tag = NotesMap({ "tags", {}, { "class" }, "startswith", "and" })
		print("Notes founded with excluded tag: " .. #notes_map_without_tag)
		assert.is_true(#notes_map > #notes_map_without_tag)
	end)
	it("should return notes with `tags` included: `status'", function()
		local notes_map = NotesMap()
		print("Notes founded: " .. #notes_map)
		local notes_map_with_tag = NotesMap({ "tags", { "status" }, {}, "startswith", "all" })
		print("Notes founded with included tag: " .. #notes_map_with_tag)
		assert.is_true(#notes_map > #notes_map_with_tag)
	end)
	it("should return notes with `basename` included: `todo.md`", function()
		local notes_map = NotesMap()
		print("Notes founded: " .. #notes_map)
		local notes_map_with_basename = NotesMap({ "basename", { "todo.md" }, {}, "startswith", "all" })
		print("Notes founded with included basename: " .. #notes_map_with_basename)
		assert.is_true(#notes_map > #notes_map_with_basename)
	end)
	it("should not found note with `basename` included: `foobarbuzz.md`", function()
		local notes_map = NotesMap()
		print("Notes founded: " .. #notes_map)
		local notes_map_with_basename = NotesMap({ "basename", { "foobarbuzz.md" }, {}, "startswith", "all" })
		print("Notes founded with included basename: " .. #notes_map_with_basename)
		assert.is_true(#notes_map_with_basename == 0)
	end)
end)
