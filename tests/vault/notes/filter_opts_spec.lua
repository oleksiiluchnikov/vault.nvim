local assert = require("luassert")
local NotesFilterOpts = require("vault.notes.filter_opts")

describe("VaultNotesFilterOpts", function()
  it("should return a new NotesFilterOpts object", function()
    local opts = NotesFilterOpts({"tags", { "foo", "bar" }, { "baz" }, "exact", "all"})
    assert.is_true(opts.by[1] == "tags")
    assert.is_true(opts.include[1] == "foo")
    assert.is_true(opts.include[2] == "bar")
    assert.is_true(opts.exclude[1] == "baz")
    assert.is_true(opts.match_opt == "exact")
    assert.is_true(opts.mode == "all")
  end)
  it("should not return a new NotesFilterOpts object", function()
    local opts = NotesFilterOpts({"tags", { "foo", "bar" }, { "baz" }, "exact", "all"})
    assert.is_false(opts.by[1] == "notes")
    assert.is_false(opts.include[1] == "foobar")
    assert.is_false(opts.include[2] == "barbuzz")
    assert.is_false(opts.exclude[1] == "foobarbuzz")
    assert.is_false(opts.match_opt == "startswith")
    assert.is_false(opts.mode == "any")
  end)
  it("should return false if opts.b` is not a string or table", function()
    local opts = NotesFilterOpts({"tags", { "foo", "bar" }, { "baz" }, "exact", "all"})
    assert.is_false(opts.by == 1)
    assert.is_false(opts.by == true)
    assert.is_false(opts.by == false)
    assert.is_false(opts.by == nil)
    assert.is_false(opts.by == function() end)
  end)
end)
